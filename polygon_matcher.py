# -*- coding: utf-8 -*-
"""Polygon Matcher

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_3qxqJXG7f7T3xK1qv_s0yOjN1UOWbb


We have a CSV file of address
We have a GeoJSON file of polygons
We want to match each address to their respective polygon on the map
 - What if there are no matches? Excludes the address.

We then want to use this data to create a new GeoJSON file that includes
the addresses within their corresponding polygons

"""

# !pip install pykml


base_url= "https://maps.googleapis.com/maps/api/geocode/json?"
AUTH_KEY = "AIzaSyDwpORh8HBqpQcm2O-HHR0D_erVR6slNOs"

import csv
import requests
import json
import urllib
from os import path
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
from shapely.geometry.multipolygon import MultiPolygon

address_map = {}

'''
Read in csv  file of addresses
Makes an api call to google maps per address and
returns a dictionary of { address: shapely point object }
'''
with open('/content/Book2.csv') as csvfile:
    readCSV = csv.reader(csvfile, delimiter=',')
    for row in readCSV:
        address = row[0]
        parameters = {"address": address,
             "key": AUTH_KEY}
        r = requests.get(f"{base_url}{urllib.parse.urlencode(parameters)}")
        data = json.loads(r.content)
        if data.get('status') != 'ZERO_RESULTS':
            geocoded = data.get('results')[0].get('geometry').get('location')
            address_map[address] = Point(geocoded['lat'], geocoded['lng'])

        else:
            address_map[address] = None

'''
Converts GeoJSON multipolygon into a shapely equivalent multipolygon
- 
'''
def multipolygon_to_shapely(coordinates):
  exterior_coordinates = coordinates[0]
  holes_coordinates = coordinates[1]
  multi_polygon_exterior = []
  multi_polygon_holes = []
  # print(exterior_coordinates)
  # print(len(exterior_coordinates))
  for coord_list in exterior_coordinates:
    # print(coord_list)
    curr_exterior_tuple_list = []
    for coord in coord_list:
      # print(coord)
      curr_exterior_tuple_list = curr_exterior_tuple_list + [tuple([coord[1], coord[0]])]
      # print(curr_exterior_tuple_list)
    multi_polygon_exterior.append(curr_exterior_tuple_list)

  for coord_list in holes_coordinates:
    curr_holes_tuple_list = []
    for coord in coord_list:
      curr_holes_tuple_list = curr_holes_tuple_list + [tuple([coord[1], coord[0]])]
    multi_polygon_holes.append(curr_holes_tuple_list)
  print("exterior: ", multi_polygon_exterior)
  print("holes: ", multi_polygon_holes)
  return MultiPolygon(multi_polygon_exterior[0], multi_polygon_holes)


# Parse through the GeoJSON file, for each
market_map = {}

geoJSON_file = '/content/BOSTON_SUBDISTRICTS.geojson'

with open(geoJSON_file, 'r') as f:
  data = json.load(f)
  n=1
  for feature in data['features']:
    sub_district = feature['properties']['Zone_Desc']
    unique_code = feature['properties']['Unique_Code']
    coordinates = feature['geometry']['coordinates']
    if feature['geometry']['type'] == 'MultiPolygon':
      print('multipolygon:')
      print(coordinates)
    else:
      print(coordinates)
      # mp = multipolygon_to_shapely(coordinates)
    #   coordinates_tuple = ()
    #   for i in range(len(coordinates)):
    #     multi_polygon_input = [()]
    #     if i == 0:
    #       outer_coordinates = coordinates[i][0]
    #       for j in range(len(outer_coordinates)):
    #         outer_coordinates[j] = (temp_coordinates[j][1], temp_coordinates[j][0])
    #     for j in range(len(temp_coordinates)):
    #       temp_coordinates[j] = Point(temp_coordinates[j][1], temp_coordinates[j][0])
    #     coordinates_tuple = (coordinates_tuple, tuple(temp_coordinates))
    #   print(coordinates_tuple)
    #   market_map[unique_code] = (sub_district, MultiPolygon(coordinates_tuple))
    # else:
    #   temp_coordinates = coordinates[0]
    #   for j in range(len(temp_coordinates)):
    #     temp_coordinates[j] = Point(temp_coordinates[j][1], temp_coordinates[j][0])
    #     market_map[unique_code] = (sub_district, Polygon(temp_coordinates))

with open('output.csv', mode='w') as output_file:
   output_writer = csv.writer(output_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
   output_writer.writerow(['Address', 'Sub District', 'Unique Code'])
   for address in address_map:
    point = address_map[address]
    print(point)
    market_found = False
    for market in market_map:
        print(market_map[market][1])
        if point == None:
            output_writer.writerow([address, 'no point', 'no point'])
            break
        polygon = market_map[market][1]
        if polygon.contains(point):
            output_writer.writerow([address, market_map[market][0], market])
            market_found = True
            break
    if not market_found:
        output_writer.writerow([address, 'N/A', 'N/A'])

geo_dict = {}
geo_dict["type"] = "FeatureCollection"
geo_dict["features"] = [{"type": "Feature", "geometry": a} for a in [geometry.mapping(b) for b in polygon_list]]
my_geojson = json.dumps(geo_dict) # str in json format